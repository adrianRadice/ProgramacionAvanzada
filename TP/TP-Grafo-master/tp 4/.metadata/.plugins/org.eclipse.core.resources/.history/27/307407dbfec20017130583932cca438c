package grafo;

public class Grafo {

	private MatrizSimetrica distancias;
	
	public GrafoNDNP(String path) throws FileNotFoundException {
		this.matriz = new MatrizSimetrica(path);
		
		this.cantNodos = matriz.getCantNodos();
		this.cantAristas = matriz.getCantAristas();
		this.adyacencia = matriz.getPorcenAdy();
		this.grMax = matriz.getGradoMax();
		this.grMin = matriz.getGradoMin();
		this.grados = matriz.getGrados();
		this.mejorColoreado = new int[cantNodos];
		this.listaColoreada = new int[cantNodos];
		this.frecuencia = new int[cantNodos];
		this.cantColores = 1;

		for (int i = 0; i < cantNodos; i++) {
			listaNodos.add(new Nodo(i));
			listaNodos.get(i).setGrado(grados[i]);
		}	
	}
	
	public void escribir(String path) throws IOException {
		FileWriter archivo = new FileWriter(path + ".in");
		PrintWriter fichero = new PrintWriter(archivo);
		fichero.println(cantNodos + " " + matriz.calcularAristas() + " " + getPorcentajeAdy() + " " + getGradoMax() + " " + getGradoMin());
		for (int i = 0; i < cantNodos; i++) {
			for (int j = i; j < cantNodos; j++) {
				if (i != j && matriz.getValor(i, j) == true) {
					fichero.println(i + " " + j);					
				}
			}
		}
		archivo.close();
	}
	
	public Grafo(int cantidadNodos) {
		// TODO Auto-generated constructor stub
		distancias = new MatrizSimetrica(cantidadNodos);
	}

	public void addArista(int nodo1, int nodo2, boolean valor) {
		// TODO Auto-generated method stub
		distancias.setValor(nodo1, nodo2, valor);
	}

	@Override
	public String toString() {
		return "Grafo [distancias=" + distancias + "]";
	}

	public int getMaximaCantidadDeAristasPosibles() {
		// TODO Auto-generated method stub
		return distancias.getSize();
	}

	public boolean getDistancia(int i, int j) {
		// TODO Auto-generated method stub
		return distancias.getValor(i, j);
	}

	
}
