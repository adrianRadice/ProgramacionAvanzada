package grafo;
;

public class Grafo{

	private MatrizSimetrica aristas;
	private Nodo[] nodos;
	private int cantColores;
	
	public Grafo(int cantidadDeNodos,int infinito){
		aristas= new MatrizSimetrica(cantidadDeNodos,infinito);
		nodos = new Nodo[cantidadDeNodos];
	}

	public int getCantidadDeNodos() {
		// TODO Auto-generated method stub
		return aristas.getOrdenMatriz();
	}

	private int colorear() {
		int color=1;   
		int columna;
		int cantidadDeNodosEntrada =nodos.length;
		nodos[0].setColor(color);
		for (int nodoAcolorear = 1; nodoAcolorear < cantidadDeNodosEntrada; nodoAcolorear++)
		{
			nodos[nodoAcolorear].setColor(color);
			columna = 0;
			while ( columna < cantidadDeNodosEntrada){
				//VERIFICO SI ES ADYACENTE Y SI EL COLOR EN EL QUE ESTOY ACTUALMENTE PARADO ES EL MISMO DE SER ASI DEBERIA CAMBIARLO
				if(	aristas.getValue(nodos[nodoAcolorear].getIndex(), nodos[columna].getIndex())  && //ES ADYACENTE AL PIVOT
					nodos[nodoAcolorear].getIndex() == nodos[columna].getColor()//EL ADYACENTE ES DEL MISMO COLOR
				){
					color++;
					if(color > cantColores) //CREE UN NUEVO COLOR
						cantColores = color; 
					else
						columna= -1;
					nodos[nodoAcolorear].setColor(color);
				}
				columna++;
			}
			color = 1;
		}
		return cantColores;
	}

	private Nodo[] getNodos() {
		// TODO Auto-generated method stub
		return nodos;
	}

	public void addNodo(Nodo n){
		nodos[n.getIndex()] = n;
	}
	
	public void addArista(Arista a){
		aristas.setValue(a.getNodoIzq().getIndex(), a.getNodoDer().getIndex(), a.getCosto());
	}

	public int colorearSecuencialmente(){
		return colorear();
	}
	
	public static void main(String args[]){
		Grafo g = new Grafo(5,Integer.MAX_VALUE);
		
		Nodo a = new Nodo(0,"a");
		Nodo b = new Nodo(1,"b");
		Nodo c = new Nodo(2,"c");
		Nodo d = new Nodo(3,"d");
		Nodo e = new Nodo(4,"e");
		
		Arista a1 = new Arista(a,b,true);
		Arista a2 = new Arista(a,c,true);
		Arista a3 = new Arista(b,d,true);
		Arista a4 = new Arista(c,d,true);
		Arista a5 = new Arista(d,e,true);
		
		g.addNodo(a);
		g.addNodo(b);
		g.addNodo(c);
		g.addNodo(d);
		g.addNodo(e);
		
		g.addArista(a1);
		g.addArista(a2);
		g.addArista(a3);
		g.addArista(a4);
		g.addArista(a5);
		
		g.colorearSecuencialmente();
		
		for(Nodo n : g.getNodos())
			System.out.println(n);
	}

	
}
